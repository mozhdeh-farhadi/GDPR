{"fg_segments": ["(function () {function getSessionCookies () {cookieArray = new Array (); var cName = / ^ s? incap_ses_ /; var c = document.cookie.split (\";\"); for (var i = 0; i <c.length; i ++) {key = c [i] .substr (0, c [i] .indexOf (\"=\")); value = c [i] .substr (c [i] .indexOf (\"= \") + 1, c [i] .length); if (cName.test (key)) {cookieArray [cookieArray.length] = value}} return cookieArray} function setIncapCookie (vArray) {try {cookies = getSessionCookies (); digests = new Array (cookies.length); for (i = 0; i <cookies.length; i ++) {digests [i] = simpleDigest ((vArray) + cookies [i])} res = vArray + \", digest = \"+ (digests.join ())} catch (e) {res = vArray +\", digest = \"+ (encodeURIComponent (e.toString ()))} createCookie (\" ___ utmvc \", res, 20)} function simpleDigest (mystr) {var res = 0; for (was i = 0; i <mystr.length; i ++) {res + = mystr.charCodeAt (i)} return res} function createCookie (name, value, seconds) {if ( seconds) {var date = new Date (); date.setTime (date.getTime () + (seconds * 1000)); var expires = \" ; expires = \"+ date.toGMTString ()} else {var expires =\"} document.cookie = name + \"=\" + value + expires + \"; path = /\"} function test (o) {var res = \"; var vArray = new Array (); for (var j = 0; j <o.length; j ++) {var test = o [j] [0] switch (o [j] [1]) {case \"exists\": try {if (typeof (test))! = \"undefined\") {vArray [vArray.length] = encodeURIComponent (test + \"= true\")} else {vArray [vArray.length] = encodeURIComponent (test + \"= false \")}} catch (e) {vArray [vArray.length] = encodeURIComponent (test +\" = false \")} break; case\" value \": try {vArray [vArray.length] = encodeURIComponent (test +\" = \"+ eval (test) .toString ()) catch (e) {vArray [vArray.length] = encodeURIComponent (test + \"=\" + e)} break; case \"value_or_nil\": try {if (typeof (eval (test) )! = \"undefined\") {vArray [vArray.length] = encodeURIComponent (test + \"=\" + eval (test) .toString ())} else {vArray [vArray.length] = encodeURIComponent (test + \"= nil\" )} catch (s) {vArray [vArray.length] = encodeURIComponent (test + \":\" + test_type + \"= \"+ e)} break; case \"plugin_extentions\": try {extentions = [] for (var i = 0; i"], "cg_segments": ["(function () {function getSessionCookies () {cookieArray = new Array (); var cName = / ^ s? incap_ses_ /; var c = document.cookie.split (\";\"); for (var i = 0; i <c.length; i ++) {key = c [i] .substr (0, c [i] .indexOf (\"=\")); value = c [i] .substr (c [i] .indexOf (\"= \") + 1, c [i] .length); if (cName.test (key)) {cookieArray [cookieArray.length] = value}} return cookieArray} function setIncapCookie (vArray) {try {cookies = getSessionCookies (); digests = new Array (cookies.length); for (i = 0; i <cookies.length; i ++) {digests [i] = simpleDigest ((vArray) + cookies [i])} res = vArray + \", digest = \"+ (digests.join ())} catch (e) {res = vArray +\", digest = \"+ (encodeURIComponent (e.toString ()))} createCookie (\" ___ utmvc \", res, 20)} function simpleDigest (mystr) {var res = 0; for (was i = 0; i <mystr.length; i ++) {res + = mystr.charCodeAt (i)} return res} function createCookie (name, value, seconds) {if ( seconds) {var date = new Date (); date.setTime (date.getTime () + (seconds * 1000)); var expires = \" ; expires = \"+ date.toGMTString ()} else {var expires =\"} document.cookie = name + \"=\" + value + expires + \"; path = /\"} function test (o) {var res = \"; var vArray = new Array (); for (var j = 0; j <o.length; j ++) {var test = o [j] [0] switch (o [j] [1]) {case \"exists\": try {if (typeof (test))! = \"undefined\") {vArray [vArray.length] = encodeURIComponent (test + \"= true\")} else {vArray [vArray.length] = encodeURIComponent (test + \"= false \")}} catch (e) {vArray [vArray.length] = encodeURIComponent (test +\" = false \")} break; case\" value \": try {vArray [vArray.length] = encodeURIComponent (test +\" = \"+ eval (test) .toString ()) catch (e) {vArray [vArray.length] = encodeURIComponent (test + \"=\" + e)} break; case \"value_or_nil\": try {if (typeof (eval (test) )! = \"undefined\") {vArray [vArray.length] = encodeURIComponent (test + \"=\" + eval (test) .toString ())} else {vArray [vArray.length] = encodeURIComponent (test + \"= nil\" )} catch (s) {vArray [vArray.length] = encodeURIComponent (test + \":\" + test_type + \"= \"+ e)} break; case \"plugin_extentions\": try {extentions = [] for (var i = 0; i"], "fg_to_cg_map": {"0": 0}, "original_fg_segments": ["(function() { function getSessionCookies() { cookieArray = new Array(); var cName = /^ \\ s?incap_ses_/; var c = document.cookie.split(\";\"); for (var i = 0; i < c.length; i++) { key = c[i].substr(0, c[i].indexOf(\"=\")); value = c[i].substr(c[i].indexOf(\"=\") + 1, c[i].length); if (cName.test(key)) { cookieArray[cookieArray.length] = value } } return cookieArray } function setIncapCookie(vArray) { try { cookies = getSessionCookies(); digests = new Array(cookies.length); for (var i = 0; i < cookies.length; i++) { digests[i] = simpleDigest((vArray) + cookies[i]) } res = vArray + \",digest=\" + (digests.join()) } catch (e) { res = vArray + \",digest=\" + (encodeURIComponent(e.toString())) } createCookie(\"___utmvc\", res, 20) } function simpleDigest(mystr) { var res = 0; for (var i = 0; i < mystr.length; i++) { res += mystr.charCodeAt(i) } return res } function createCookie(name, value, seconds) { if (seconds) { var date = new Date(); date.setTime(date.getTime() + (seconds * 1000)); var expires = \"; expires=\" + date.toGMTString() } else { var expires = \" } document.cookie = name + \"=\" + value + expires + \"; path=/\" } function test(o) { var res = \"; var vArray = new Array(); for (var j = 0; j < o.length; j++) { var test = o[j][0] switch (o[j][1]) { case \"exists\": try { if(typeof(eval(test)) != \"undefined\"){ vArray[vArray.length] = encodeURIComponent(test + \"=true\") } else{ vArray[vArray.length] = encodeURIComponent(test + \"=false\") } } catch (e) { vArray[vArray.length] = encodeURIComponent(test + \"=false\") } break; case \"value\": try { vArray[vArray.length] = encodeURIComponent(test + \"=\" + eval(test).toString()) } catch (e) { vArray[vArray.length] = encodeURIComponent(test + \"=\" + e) } break; case \"value_or_nil\": try{ if(typeof(eval(test)) != \"undefined\"){ vArray[vArray.length] = encodeURIComponent(test + \"=\" + eval(test).toString()) } else{ vArray[vArray.length] = encodeURIComponent(test + \"=nil\") }\t} catch(e){ vArray[vArray.length] = encodeURIComponent(test + \":\" + test_type + \"=\" + e) } break; case \"plugin_extentions\": try { extentions = [] for (var i=0;i"], "original_cg_segments": ["(function() { function getSessionCookies() { cookieArray = new Array(); var cName = /^ \\ s?incap_ses_/; var c = document.cookie.split(\";\"); for (var i = 0; i < c.length; i++) { key = c[i].substr(0, c[i].indexOf(\"=\")); value = c[i].substr(c[i].indexOf(\"=\") + 1, c[i].length); if (cName.test(key)) { cookieArray[cookieArray.length] = value } } return cookieArray } function setIncapCookie(vArray) { try { cookies = getSessionCookies(); digests = new Array(cookies.length); for (var i = 0; i < cookies.length; i++) { digests[i] = simpleDigest((vArray) + cookies[i]) } res = vArray + \",digest=\" + (digests.join()) } catch (e) { res = vArray + \",digest=\" + (encodeURIComponent(e.toString())) } createCookie(\"___utmvc\", res, 20) } function simpleDigest(mystr) { var res = 0; for (var i = 0; i < mystr.length; i++) { res += mystr.charCodeAt(i) } return res } function createCookie(name, value, seconds) { if (seconds) { var date = new Date(); date.setTime(date.getTime() + (seconds * 1000)); var expires = \"; expires=\" + date.toGMTString() } else { var expires = \" } document.cookie = name + \"=\" + value + expires + \"; path=/\" } function test(o) { var res = \"; var vArray = new Array(); for (var j = 0; j < o.length; j++) { var test = o[j][0] switch (o[j][1]) { case \"exists\": try { if(typeof(eval(test)) != \"undefined\"){ vArray[vArray.length] = encodeURIComponent(test + \"=true\") } else{ vArray[vArray.length] = encodeURIComponent(test + \"=false\") } } catch (e) { vArray[vArray.length] = encodeURIComponent(test + \"=false\") } break; case \"value\": try { vArray[vArray.length] = encodeURIComponent(test + \"=\" + eval(test).toString()) } catch (e) { vArray[vArray.length] = encodeURIComponent(test + \"=\" + e) } break; case \"value_or_nil\": try{ if(typeof(eval(test)) != \"undefined\"){ vArray[vArray.length] = encodeURIComponent(test + \"=\" + eval(test).toString()) } else{ vArray[vArray.length] = encodeURIComponent(test + \"=nil\") }\t} catch(e){ vArray[vArray.length] = encodeURIComponent(test + \":\" + test_type + \"=\" + e) } break; case \"plugin_extentions\": try { extentions = [] for (var i=0;i"], "policy_url": "https://www.bitstamp.net/privacy-policy/", "company_url": null, "raw_html": "\n\n\n\n(function() {  function getSessionCookies() {   cookieArray = new Array();   var cName = /^\\s?incap_ses_/;   var c = document.cookie.split(\";\");   for (var i = 0; i < c.length; i++) {    key = c[i].substr(0, c[i].indexOf(\"=\"));    value = c[i].substr(c[i].indexOf(\"=\") + 1, c[i].length);    if (cName.test(key)) {     cookieArray[cookieArray.length] = value    }   }   return cookieArray  }  function setIncapCookie(vArray) {   try {    cookies = getSessionCookies();    digests = new Array(cookies.length);    for (var i = 0; i < cookies.length; i++) {     digests[i] = simpleDigest((vArray) + cookies[i])    }    res = vArray + \",digest=\" + (digests.join())   } catch (e) {    res = vArray + \",digest=\" + (encodeURIComponent(e.toString()))   }   createCookie(\"___utmvc\", res, 20)  }  function simpleDigest(mystr) {   var res = 0;   for (var i = 0; i < mystr.length; i++) {    res += mystr.charCodeAt(i)   }   return res  }  function createCookie(name, value, seconds) {   if (seconds) {    var date = new Date();    date.setTime(date.getTime() + (seconds * 1000));    var expires = \"; expires=\" + date.toGMTString()   } else {    var expires = \"\"   }   document.cookie = name + \"=\" + value + expires + \"; path=/\"  }  function test(o) {   var res = \"\";   var vArray = new Array();   for (var j = 0; j < o.length; j++) {    var test = o[j][0]    switch (o[j][1]) {    case \"exists\":     try { \t if(typeof(eval(test)) != \"undefined\"){ \t\tvArray[vArray.length] = encodeURIComponent(test + \"=true\") \t } \t else{ \t\tvArray[vArray.length] = encodeURIComponent(test + \"=false\") \t }     } catch (e) {      vArray[vArray.length] = encodeURIComponent(test + \"=false\")     }     break;    case \"value\":     try {      vArray[vArray.length] = encodeURIComponent(test + \"=\" + eval(test).toString())     } catch (e) {      vArray[vArray.length] = encodeURIComponent(test + \"=\" + e)     }     break; \tcase \"value_or_nil\": \t\ttry{ \t\t\tif(typeof(eval(test)) != \"undefined\"){ \t\t\t\tvArray[vArray.length] = encodeURIComponent(test + \"=\" + eval(test).toString()) \t\t\t} \t\t\telse{ \t\t\t\tvArray[vArray.length] = encodeURIComponent(test + \"=nil\") \t\t\t}\t\t\t \t\t} \t\tcatch(e){ \t\t\tvArray[vArray.length] = encodeURIComponent(test + \":\" + test_type + \"=\" + e) \t\t} \t\tbreak;     case \"plugin_extentions\": \t\ttry { \t\t\textentions = [] \t\t\tfor (var i=0;i<navigator.plugins.length;i++) { \t\t\t\tfilename = navigator.plugins[i].filename \t\t\t\tif(typeof(filename) != \"undefined\") { \t\t\t\t\tif (filename.split(\".\").length == 2) { \t\t\t\t\t\text = filename.split(\".\")[1] \t\t\t\t\t\tif (extentions.indexOf(ext) < 0) { \t\t\t\t\t\t\textentions.push(ext) \t\t\t\t\t\t}\t\t\t\t \t\t\t\t\t} \t\t\t\t}      \t\t\t} \t\t\tfor\t(i = 0; i < extentions.length; i++) { \t\t\t\tvArray[vArray.length] = encodeURIComponent(\"plugin_ext=\" + extentions[i]); \t\t\t} \t\t} catch (e) { \t\t vArray[vArray.length] = encodeURIComponent(\"plugin_ext=\" + e) \t\t} \t\tbreak; \tcase \"plugins\":     try{         p=navigator.plugins         pres=\"\"         for (a in p){pres+=(p[a]['description']+\" \").substring(0,20)}         vArray[vArray.length] = encodeURIComponent(\"plugins=\" + pres);         }     catch(e){         vArray[vArray.length] = encodeURIComponent(\"plugins=\" +e);         } \tbreak;      case \"plugin\":     try {      a = navigator.plugins;      for (i in a) {       f = a[i][\"filename\"].split(\".\");       if (f.length == 2) {        vArray[vArray.length] = encodeURIComponent(\"plugin=\" + f[1]);        break       }      }     } catch (e) {      vArray[vArray.length] = encodeURIComponent(\"plugin=\" + e)     }     break    }   }   vArray = vArray.join();   return vArray  }  var o = [   [\"navigator\", \"exists\"],   [\"navigator.vendor\", \"value\"],   [\"navigator.vendor\", \"value_or_nil\"],   [\"opera\", \"exists\"],   [\"ActiveXObject\", \"exists\"],   [\"navigator.appName\", \"value\"],   [\"navigator.appName\", \"value_or_nil\"],   [\"platform\", \"plugin\"],   [\"platform\", \"plugin_extentions\"],   [\"webkitURL\", \"exists\"],   [\"navigator.plugins.length==0\", \"value\"],   [\"navigator.plugins.length==0\", \"value_or_nil\"],   [\"_phantom\", \"exists\"] ];  try {   setIncapCookie(test(o));   document.createElement(\"img\").src = \"/_Incapsula_Resource?SWKMTFSR=1&e=\" + Math.random()  } catch (e) {   img = document.createElement(\"img\");   img.src = \"/_Incapsula_Resource?SWKMTFSR=1&e=\" + e  } })();\n\n\n(function() { \nvar z=\"\";var bfor (var i=0;i<b.length;i+=2){z=z+parseInt(b.substring(i, i+2), 16)+\",\";}z = z.substring(0,z.length-1); eval(eval('String.fromCharCode('+z+')'));})();\n\n\n\n", "status": "policy_too_short"}